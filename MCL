#include <stdio.h>
#include <math.h>
#include <time.h>

#define NUM_PARTICLES 1000
#define NUM_ITERATIONS 1000
#define MAX_MOVE 2.0
#define MAX_TURN 0.1
#define SENSOR_NOISE 0.1
#define MAP_SIZE 100.0

struct particle {
  double x;
  double y;
  double heading;
  double weight;
};

void initializeParticles(struct particle particles[]) {
  int i;
  for (i = 0; i < NUM_PARTICLES; i++) {
    particles[i].x = (double)rand() / RAND_MAX * MAP_SIZE;
    particles[i].y = (double)rand() / RAND_MAX * MAP_SIZE;
    particles[i].heading = (double)rand() / RAND_MAX * 2 * M_PI;
    particles[i].weight = 1.0 / NUM_PARTICLES;
  }
}

void moveParticles(struct particle particles[], double distance, double heading) {
  int i;
  for (i = 0; i < NUM_PARTICLES; i++) {
    particles[i].x += distance * cos(particles[i].heading + heading);
    particles[i].y += distance * sin(particles[i].heading + heading);
    particles[i].heading += heading + (double)rand() / RAND_MAX * MAX_TURN - MAX_TURN / 2;
  }
}

void senseParticles(struct particle particles[], double observation) {
  int i;
  for (i = 0; i < NUM_PARTICLES; i++) {
    double noise = (double)rand() / RAND_MAX * SENSOR_NOISE * 2 - SENSOR_NOISE;
    double distance = observation + noise;
    particles[i].weight = particles[i].weight * exp(-0.5 * pow(distance - sqrt(pow(particles[i].x, 2) + pow(particles[i].y, 2)), 2) / SENSOR_NOISE);
  }
}

void resampleParticles(struct particle particles[]) {
  int i;
  struct particle newParticles[NUM_PARTICLES];
  double totalWeight = 0;
  for (i = 0; i < NUM_PARTICLES; i++) {
    totalWeight += particles[i].weight;
  }
  for (i = 0; i < NUM_PARTICLES; i++) {
    double sample = (double)rand() / RAND_MAX * totalWeight;
    int j = 0;
    while (sample > 0) {
      sample -= particles[j++].weight;
    }
    j--;
    newParticles[i] = particles[j];
    newParticles[i].weight = 1.0 / NUM_PARTICLES;
  }
  for (i = 0; i < NUM_PARTICLES; i++) {
        particles[i] = newParticles[i];
  }
}

int main() {
  srand(time(NULL));
  struct particle particles[NUM_PARTICLES];
  initializeParticles(particles);
  int i;
  for (i = 0; i < NUM_ITERATIONS; i++) {
    double distance = (double)rand() / RAND_MAX * MAX_MOVE;
    double heading = (double)rand() / RAND_MAX * 2 * M_PI - M_PI;
    moveParticles(particles, distance, heading);
    double observation = (double)rand() / RAND_MAX * MAP_SIZE;
    senseParticles(particles, observation);
    resampleParticles(particles);
  }
  double x = 0;
  double y = 0;
  double heading = 0;
  for (i = 0; i < NUM_PARTICLES; i++) {
    x += particles[i].x * particles[i].weight;
    y += particles[i].y * particles[i].weight;
    heading += particles[i].heading * particles[i].weight;
  }
  printf("Estimated position: (%.2f, %.2f)\n", x, y);
  printf("Estimated heading: %.2f\n", heading);
  return 0;
}
